# 전송계층
- 프로그램 간 데이터 전송을 담당한다.
- 포트를 이용하여 호스트 내 프로그램을 구분할 수 있다.

## 포트 (port)
- 프로그램을 구분해주는 id
- 0 ~ 1024 - 시스템 포트 -> 이미 정해져 있는 포트. ex. HTTP는 80 HTTPS는 443이다.
- 1025 ~ - 잘 알려진 포트 -> 
- ~ 사용자 포트

## TCP
- 연결형 프로토콜.
- 데이터 전송 전후로 연결을 수립하고 오류, 흐름, 혼잡 제어를 통해 신뢰성 있는 데이터 전송을 한다.

### 3-way, 4-way handshake
- 데이터를 전송하기 전 후로 호스트간 연결을 수립한다.
- 처음 연결을 수립할 때는 3-way handshake, 종료할 때는 4-way handshake
- 3-way handshake
  1. 송신 -> 수신자에게 SYN 세그먼트를 전송한다. 
  2. 수신 -> 송진자에게 SYN + ACK 세그먼트를 전송한다. (ACK로 1번에서 온 SYN 번호 + 1을 해서 보낸고 SYN으로 자신의 Sequence를 보냄)
  3. 송신 -> 수신자가 ACK세그먼트를 전송한다 (2번이 보낸 SYN 번호 + 1을 해서 보냄)
- 4-way handshake
  1. 송신 -> 수신자가 FIN 세그먼트를 전송한다.
  2. 수신 -> 송신자에게 ACK 세그먼트를 전송한다.
  3. 수신 -> 송신자에게 FIN 세그먼트를 전송한다.
  4. 송신 -> 수신자에게 ACK 세그먼트를 전송하다.
  송신자는 마지막 ACK 이후 일정 시간을 기다린 후 종류한다.
  (기다리는 이유: 미처 도착하지 못한 남은 세그먼트를 기다림)
 
- ACK (Acknowledge)
  - 받은 세그먼트 번호 + 1을 담아서 보낸다. 
  - 세그먼트를 받았고 다음 세그먼트를 줘! 라는 의미로 이해하면 좋다.

### 흐름 제어
- 송수신자 간 버퍼 크기를 넘지 않도록 데이터 속도를 제한하는 것
- stop and wait
  - 하나의 세그먼트를 보낸 후 ACK가 올 때까지 기다린다.
  - 단순하지만 네트워크 효율성이 좋지 않음 (여러 개 보낼 수 있는데 하나씩만 보내니까)
- 슬라이딩 윈도우
  - 윈도우 크기만큼이 세그먼트는 ACK를 기다리지 않고 바로 전송 가능
  - ACK가 도착하면 오른쪽으로 한 칸씩 이동하기 때문에 슬라이딩 윈도우라고 부른다.
  - 연결 수립 시 서로의 버퍼 크기를 교환하여 이를 슬라이딩 윈도우 크기로 사용한다.
  - Go back to N
    - n번째에 오류가 나면 n+1번째는 정상적으로 도착했어도 n번째부터 다시 전송 시작
  - stick 
    - 오류가 난 세그먼트만 다시 재전송


### 혼잡 제어
- 네트워크에 많은 패킷이 몰려들어서 패킷 손실이 일어나는 것 방지
- 느린 시작 (slow start)
  - 혼잡 윈도우의 크기를 1로 시작하고 패킷당 ACK가 올 때마다 크기를 1씩 늘린다. 그럼 지수적으로 크기가 증가한다.
- 혼잡 회피 (congestion avoidance)
  - threshold에 다다르면 +1씩 선형적으로 윈도우의 크기를 늘린다.
- 빠른 회복 (rapid recovery)
  - 3 duplicate ACK가 발생하면 현재 윈도우의 크기를 절반으로 줄이고 threshold의 크기를 해당값으로 정해 바로 혼잡 회피가 시작되도록 한다.
- timeout
  - 세그먼트를 보낸 후 패킷마다 타이머가 설정되는데 이 타이머가 종료될 때까지 ACK가 돌아오지 않으면 재전송을 한다.
  - timeout이 발생하면 threshold를 절반으로 줄이고 혼잡 윈도우 크기를 1로 줄여서 다시 느린 시작부터 시작한다. 

## UDP
- 비연결형 프로토콜
- 오류에 의한 재전송을 하지 않는다.
- 신뢰성이 없지만 연결 수립 과정 같은 복잡한 과정이 없이 빠르게 전송할 수 있다.
- 그래서 신뢰성이 좀 떨어져도 성능이 중요한 실시간 스트리밍, DNS같은 서비스에 사용된다.

